# Project Setup

## Creating a Executable Project

1. **Open a Terminal or Command Prompt**:

    Navigate to the parent directory where you want your new Zig project to be located.

2. **Run the `zig init-exe` Command**:

    Execute the `zig init-exe` command followed by the name of your project directory.
    For example:

    ```powershell
    zig init-exe my-zig-project
    ```

3. **Navigate to Your Project Directory**:

    Change into your newly created project directory: `cd my-zig-project`

4. **Build Your Project**:

    You can build your project using the Zig build system. Run: `zig build` This compiles your **`src/main.zig`** file and generates an executable.

5. **Run Your Project**:
    After building, you can run your newly created executable to see the result.

## What Does `zig init-exe` Do?

1. **Creates a Project Directory**:

    If not already present, Zig will create a new directory with the name you provide. If no name is provided, it defaults to creating a directory structure in the current working directory.

2. **Generates Basic Files**:

    Zig generates a set of basic files that are commonly needed for a simple executable project. This typically includes:
    - A `src/main.zig` file: This is the entry point of your application. It contains a minimal `main` function from which your application starts.
    - A `build.zig` file: This file is used by Zig's build system. It contains instructions on how to build your project, including compiling the source code and linking any dependencies. The build script is written in Zig itself, offering you a lot of flexibility and control over the build process.

3. **Initializes a Git Repository (Optional)**:

    If you have Git installed and your project directory is not already within a Git repository, `zig init-exe` can also initialize a new Git repository. This step is optional and depends on your development environment and preferences.

---
---

## Creating a Library Project

1. **Open a Terminal or Command Prompt**:

    Navigate to the parent directory where you want your new Zig library project to be located.

2. **Run the `zig init-lib` Command**:

    Execute the `zig init-lib` command followed by the name of your project directory. If you omit the directory name, Zig will set up the project in the current directory. For example:

    ```shell
    zig init-lib my-zig-library
    ```

3. **Navigate to Your Project Directory**:

    Change into your newly created project directory:

4. **Explore the Generated Files**:

    The `zig init-lib` command generates a basic set of files suitable for library development. This typically includes:

      - `src/main.zig`: This file serves as the primary entry point for your library. You can start adding your library code here.
      - `build.zig`: This file is used by Zig's build system. It contains instructions on how to build your library, including compiling the source code. The build script is written in Zig itself, offering you a lot of flexibility and control over the build process.

5. **Build Your Library**:

    You can build your library using the Zig build system. Run:

    ```powershell
    zig build
    ```

    This compiles your library code. Depending on your build.zig configuration, this might generate a static library, a shared library, or both.

6. **Use Your Library**:

    After building, your library is ready to be used. You can include it in other Zig projects, distribute it, or publish it for others to use.
